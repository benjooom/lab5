ESTIMATE of time to complete assignment: 25 hours

      Time     Time
Date  Started  Spent Work completed
----  -------  ----  --------------
04/13 10:00pm  2:00  Drafted up the proposal. Research on Redis.

04/15 5:00pm   1:00  Revised Xiao's comments and made changes to the proposal accordingly

04/22 2:30pm   1:30  Met with team to discuss the scope of the project and implementation ideas

04/26 10:00pm  2:00  Research protobuf and protoc to modify the protocol

04/30 3:30pm   1:30  Met with team and discussed further how to divide work. Shared info about protobuf

05/02 8:00pm   3:30  Figured out how to use interfaces in golang. Fixed testing script. Implemented basic collection classes

05/04 10:00am  2:00  Started implementing the APIs for the new data types

05/04 3:00pm   4:00  Continued implementing more APIs for new data types. Added Remove & Check rpc functions. Imported SortedSet.

05/04 10:00pm  1:00  Fixed testing suite, researched similar key value stores for writing the report

05/06 9:00am   2:30  Continued implementing testing suite. Added basic tests for new data types.

05/06 2:00pm   3:00  Implemented client side code for new APIs. Developed CAS. Met with team to discuss progress.

05/07 9:30am   2:00  Implemented more complex tests. Realized TTLs weren't working and fixed them throughout all functions.

05/10 2:00pm   3:00  Added integration tests for new data types. Fixed bugs in the testing suite. Updated README. Finalized writeup.
               ----
               29:00  TOTAL time spent

I did not discuss this assignment with anyone.

This assignment had many challenges along the way. My first obstacle was figuring out how to use inheritance in Golang.
We wanted to have a datastore that could store different types of data (string, slice, map, etc).
However, it was extremely difficult to learn how to use interfaces in Golang in a way that allowed us
to have a single datastore that could store different types of data. I spent a lot of time researching
while doing trial and error until the compiler finally let me compile my code.
Another hurdle was figuring out how to use protobuf and protoc to modify the protocol. At first it seemed
extremely intimidating, but after reading the documentation from previous labs and watching videos online,
I was able to create all of the protocols that our team used in the expanded version of the key value store.
The most challenging part was probably setting up the testing suite to be compatiable with the new functions. There were
various layers of abstraction and thus required the creation of nearly 5 testing methods to make 1 new rpc work.
