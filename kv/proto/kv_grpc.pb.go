// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: kv/proto/kv.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KvClient is the client API for Kv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KvClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*CreateListResponse, error)
	CreateSet(ctx context.Context, in *CreateSetResponse, opts ...grpc.CallOption) (*CreateSetResponse, error)
	CreateSortedSet(ctx context.Context, in *CreateSortedSetResponse, opts ...grpc.CallOption) (*CreateSortedSetResponse, error)
	AppendList(ctx context.Context, in *AppendListRequest, opts ...grpc.CallOption) (*AppendListResponse, error)
	AppendSet(ctx context.Context, in *AppendSetRequest, opts ...grpc.CallOption) (*AppendSetResponse, error)
	AppendSort(ctx context.Context, in *AppendSortRequest, opts ...grpc.CallOption) (*AppendSortResponse, error)
	GetRange(ctx context.Context, in *GetRangeRequest, opts ...grpc.CallOption) (*GetRangeResponse, error)
	GetShardContents(ctx context.Context, in *GetShardContentsRequest, opts ...grpc.CallOption) (*GetShardContentsResponse, error)
}

type kvClient struct {
	cc grpc.ClientConnInterface
}

func NewKvClient(cc grpc.ClientConnInterface) KvClient {
	return &kvClient{cc}
}

func (c *kvClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	out := new(SetResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) CreateList(ctx context.Context, in *CreateListRequest, opts ...grpc.CallOption) (*CreateListResponse, error) {
	out := new(CreateListResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/CreateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) CreateSet(ctx context.Context, in *CreateSetResponse, opts ...grpc.CallOption) (*CreateSetResponse, error) {
	out := new(CreateSetResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/CreateSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) CreateSortedSet(ctx context.Context, in *CreateSortedSetResponse, opts ...grpc.CallOption) (*CreateSortedSetResponse, error) {
	out := new(CreateSortedSetResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/CreateSortedSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) AppendList(ctx context.Context, in *AppendListRequest, opts ...grpc.CallOption) (*AppendListResponse, error) {
	out := new(AppendListResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/AppendList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) AppendSet(ctx context.Context, in *AppendSetRequest, opts ...grpc.CallOption) (*AppendSetResponse, error) {
	out := new(AppendSetResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/AppendSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) AppendSort(ctx context.Context, in *AppendSortRequest, opts ...grpc.CallOption) (*AppendSortResponse, error) {
	out := new(AppendSortResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/AppendSort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) GetRange(ctx context.Context, in *GetRangeRequest, opts ...grpc.CallOption) (*GetRangeResponse, error) {
	out := new(GetRangeResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/GetRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvClient) GetShardContents(ctx context.Context, in *GetShardContentsRequest, opts ...grpc.CallOption) (*GetShardContentsResponse, error) {
	out := new(GetShardContentsResponse)
	err := c.cc.Invoke(ctx, "/kv.Kv/GetShardContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KvServer is the server API for Kv service.
// All implementations must embed UnimplementedKvServer
// for forward compatibility
type KvServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Set(context.Context, *SetRequest) (*SetResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	CreateList(context.Context, *CreateListRequest) (*CreateListResponse, error)
	CreateSet(context.Context, *CreateSetResponse) (*CreateSetResponse, error)
	CreateSortedSet(context.Context, *CreateSortedSetResponse) (*CreateSortedSetResponse, error)
	AppendList(context.Context, *AppendListRequest) (*AppendListResponse, error)
	AppendSet(context.Context, *AppendSetRequest) (*AppendSetResponse, error)
	AppendSort(context.Context, *AppendSortRequest) (*AppendSortResponse, error)
	GetRange(context.Context, *GetRangeRequest) (*GetRangeResponse, error)
	GetShardContents(context.Context, *GetShardContentsRequest) (*GetShardContentsResponse, error)
	mustEmbedUnimplementedKvServer()
}

// UnimplementedKvServer must be embedded to have forward compatible implementations.
type UnimplementedKvServer struct {
}

func (UnimplementedKvServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKvServer) Set(context.Context, *SetRequest) (*SetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedKvServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKvServer) CreateList(context.Context, *CreateListRequest) (*CreateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateList not implemented")
}
func (UnimplementedKvServer) CreateSet(context.Context, *CreateSetResponse) (*CreateSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSet not implemented")
}
func (UnimplementedKvServer) CreateSortedSet(context.Context, *CreateSortedSetResponse) (*CreateSortedSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSortedSet not implemented")
}
func (UnimplementedKvServer) AppendList(context.Context, *AppendListRequest) (*AppendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendList not implemented")
}
func (UnimplementedKvServer) AppendSet(context.Context, *AppendSetRequest) (*AppendSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendSet not implemented")
}
func (UnimplementedKvServer) AppendSort(context.Context, *AppendSortRequest) (*AppendSortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendSort not implemented")
}
func (UnimplementedKvServer) GetRange(context.Context, *GetRangeRequest) (*GetRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRange not implemented")
}
func (UnimplementedKvServer) GetShardContents(context.Context, *GetShardContentsRequest) (*GetShardContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShardContents not implemented")
}
func (UnimplementedKvServer) mustEmbedUnimplementedKvServer() {}

// UnsafeKvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KvServer will
// result in compilation errors.
type UnsafeKvServer interface {
	mustEmbedUnimplementedKvServer()
}

func RegisterKvServer(s grpc.ServiceRegistrar, srv KvServer) {
	s.RegisterService(&Kv_ServiceDesc, srv)
}

func _Kv_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_CreateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).CreateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/CreateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).CreateList(ctx, req.(*CreateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_CreateSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSetResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).CreateSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/CreateSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).CreateSet(ctx, req.(*CreateSetResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_CreateSortedSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSortedSetResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).CreateSortedSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/CreateSortedSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).CreateSortedSet(ctx, req.(*CreateSortedSetResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_AppendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).AppendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/AppendList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).AppendList(ctx, req.(*AppendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_AppendSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).AppendSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/AppendSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).AppendSet(ctx, req.(*AppendSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_AppendSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendSortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).AppendSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/AppendSort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).AppendSort(ctx, req.(*AppendSortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_GetRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).GetRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/GetRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).GetRange(ctx, req.(*GetRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kv_GetShardContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShardContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).GetShardContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kv.Kv/GetShardContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).GetShardContents(ctx, req.(*GetShardContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Kv_ServiceDesc is the grpc.ServiceDesc for Kv service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kv_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kv.Kv",
	HandlerType: (*KvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Kv_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Kv_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Kv_Delete_Handler,
		},
		{
			MethodName: "CreateList",
			Handler:    _Kv_CreateList_Handler,
		},
		{
			MethodName: "CreateSet",
			Handler:    _Kv_CreateSet_Handler,
		},
		{
			MethodName: "CreateSortedSet",
			Handler:    _Kv_CreateSortedSet_Handler,
		},
		{
			MethodName: "AppendList",
			Handler:    _Kv_AppendList_Handler,
		},
		{
			MethodName: "AppendSet",
			Handler:    _Kv_AppendSet_Handler,
		},
		{
			MethodName: "AppendSort",
			Handler:    _Kv_AppendSort_Handler,
		},
		{
			MethodName: "GetRange",
			Handler:    _Kv_GetRange_Handler,
		},
		{
			MethodName: "GetShardContents",
			Handler:    _Kv_GetShardContents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kv/proto/kv.proto",
}
